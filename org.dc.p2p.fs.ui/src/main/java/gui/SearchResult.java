package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import conf.ServerConfigurations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import service.Node;
import client.api.downloadUtil;
import util.Result;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * @author janaka
 */
public class SearchResult {
    public JPanel SearchResult;
    private JTextPane SearchString;
    private JPanel JPSearchPanel;
    private JPanel JPSearchResultSet;
    private JButton downloadButton;
    private JList ResultList;
    private JTextPane SearchResults;

    private static final Logger log = LoggerFactory.getLogger(SearchResult.class);

    public void setResultList(JList resultList, DefaultListModel list) {
        resultList.setModel(list);
    }

    public void setSearchResults(String searchResults) {
        SearchResults.setText(searchResults);
    }

    public void setSearchString(JTextPane searchString, String searchtext) {
        searchString.setText("Search Result for : " + searchtext);
    }

    public SearchResult(ServerConfigurations configs, Node node) {

        downloadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedfile = (String) ResultList.getSelectedValue();
                if (selectedfile != null) {
                    String[] parts = selectedfile.split(" - ");
                    selectedfile = parts[1];
                    String[] IpPort = parts[0].split(":");
                    String ServerIP = IpPort[0].substring(1, IpPort[0].length());
                    String ServerPort = IpPort[1].substring(0, IpPort[1].length() - 1);
                    log.info("Downloading [" + selectedfile + "] from server node " + ServerIP + ":" + ServerPort);
                    try {
                        downloadUtil.downloadFile(ServerIP, ServerPort, selectedfile);
                        JOptionPane.showMessageDialog(new JFrame(),
                                "Download Complete \nDownload Location :" + configs.getFilesDownloadDirectory(),
                                "Download Status",
                                JOptionPane.NO_OPTION);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(new JFrame(),
                                "Download Failed",
                                "Download Status",
                                JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(new JFrame(),
                            "Download Failed, Please select a file to Download",
                            "Download Status",
                            JOptionPane.WARNING_MESSAGE);
                }
            }
        });
    }

    public void init(Node node, String searchtext, DefaultListModel resutList) {
        setSearchString(SearchString, searchtext);
        setResultList(ResultList, resutList);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        SearchResult = new JPanel();
        SearchResult.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        SearchResult.setPreferredSize(new Dimension(800, 500));
        JPSearchPanel = new JPanel();
        JPSearchPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 10, 0, 10), -1, -1));
        SearchResult.add(JPSearchPanel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        JPSearchPanel.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        JPSearchPanel.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        SearchString = new JTextPane();
        SearchString.setEditable(false);
        SearchString.setText("Search Result for : ");
        JPSearchPanel.add(SearchString, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 1), null, 0, false));
        JPSearchResultSet = new JPanel();
        JPSearchResultSet.setLayout(new GridLayoutManager(3, 3, new Insets(0, 10, 0, 10), -1, -1));
        SearchResult.add(JPSearchResultSet, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        downloadButton = new JButton();
        downloadButton.setText("Download");
        JPSearchResultSet.add(downloadButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ResultList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        ResultList.setModel(defaultListModel1);
        JPSearchResultSet.add(ResultList, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final Spacer spacer3 = new Spacer();
        JPSearchResultSet.add(spacer3, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        JPSearchResultSet.add(spacer4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        JPSearchResultSet.add(spacer5, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return SearchResult;
    }

}
